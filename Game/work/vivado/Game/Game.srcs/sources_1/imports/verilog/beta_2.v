/*
   This file was generated automatically by Alchitry Labs version 1.2.7.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module beta_2 (
    input p1_rolldicebutton,
    input p1_holdbutton,
    input p2_rolldicebutton,
    input p2_holdbutton,
    input clk,
    input rst,
    output reg [7:0] p_A_acc_out,
    output reg [7:0] p_A_cur_out,
    output reg [7:0] p_B_acc_out,
    output reg [7:0] p_B_cur_out,
    output reg dice12,
    output reg decimal_counter_increase,
    output reg decimal_counter_rst
  );
  
  
  
  reg [15:0] inputAlu_a;
  
  reg [15:0] inputAlu_b;
  
  wire [16-1:0] M_alu_out;
  wire [1-1:0] M_alu_z;
  wire [1-1:0] M_alu_v;
  wire [1-1:0] M_alu_n;
  reg [16-1:0] M_alu_a;
  reg [16-1:0] M_alu_b;
  reg [6-1:0] M_alu_alufn;
  alu_16_6 alu (
    .a(M_alu_a),
    .b(M_alu_b),
    .alufn(M_alu_alufn),
    .out(M_alu_out),
    .z(M_alu_z),
    .v(M_alu_v),
    .n(M_alu_n)
  );
  
  wire [1-1:0] M_edge_detector_diceroll_out;
  reg [1-1:0] M_edge_detector_diceroll_in;
  edge_detector_4 edge_detector_diceroll (
    .clk(clk),
    .in(M_edge_detector_diceroll_in),
    .out(M_edge_detector_diceroll_out)
  );
  wire [6-1:0] M_game_controlunit_alufn;
  wire [2-1:0] M_game_controlunit_asel;
  wire [3-1:0] M_game_controlunit_bsel;
  wire [2-1:0] M_game_controlunit_alu_out_sel;
  wire [4-1:0] M_game_controlunit_regfile_write_address;
  wire [4-1:0] M_game_controlunit_regfile_read_address_a;
  wire [4-1:0] M_game_controlunit_regfile_read_address_b;
  wire [1-1:0] M_game_controlunit_we_regfile;
  wire [1-1:0] M_game_controlunit_decimal_counter_increase;
  wire [1-1:0] M_game_controlunit_decimal_counter_rst;
  wire [1-1:0] M_game_controlunit_score_rst;
  wire [4-1:0] M_game_controlunit_debug;
  reg [16-1:0] M_game_controlunit_regfile_datain;
  reg [1-1:0] M_game_controlunit_p1_rolldicebutton;
  reg [1-1:0] M_game_controlunit_p1_holdbutton;
  reg [1-1:0] M_game_controlunit_p2_rolldicebutton;
  reg [1-1:0] M_game_controlunit_p2_holdbutton;
  reg [1-1:0] M_game_controlunit_diceroll;
  game_CU_7 game_controlunit (
    .clk(clk),
    .rst(rst),
    .regfile_datain(M_game_controlunit_regfile_datain),
    .p1_rolldicebutton(M_game_controlunit_p1_rolldicebutton),
    .p1_holdbutton(M_game_controlunit_p1_holdbutton),
    .p2_rolldicebutton(M_game_controlunit_p2_rolldicebutton),
    .p2_holdbutton(M_game_controlunit_p2_holdbutton),
    .diceroll(M_game_controlunit_diceroll),
    .alufn(M_game_controlunit_alufn),
    .asel(M_game_controlunit_asel),
    .bsel(M_game_controlunit_bsel),
    .alu_out_sel(M_game_controlunit_alu_out_sel),
    .regfile_write_address(M_game_controlunit_regfile_write_address),
    .regfile_read_address_a(M_game_controlunit_regfile_read_address_a),
    .regfile_read_address_b(M_game_controlunit_regfile_read_address_b),
    .we_regfile(M_game_controlunit_we_regfile),
    .decimal_counter_increase(M_game_controlunit_decimal_counter_increase),
    .decimal_counter_rst(M_game_controlunit_decimal_counter_rst),
    .score_rst(M_game_controlunit_score_rst),
    .debug(M_game_controlunit_debug)
  );
  wire [16-1:0] M_players_out_a;
  wire [16-1:0] M_players_out_b;
  wire [32-1:0] M_players_all_scores;
  wire [4-1:0] M_players_all_buttons;
  wire [16-1:0] M_players_counter_out;
  reg [4-1:0] M_players_write_address;
  reg [1-1:0] M_players_we;
  reg [16-1:0] M_players_data;
  reg [4-1:0] M_players_read_address_a;
  reg [4-1:0] M_players_read_address_b;
  regfile_8 players (
    .clk(clk),
    .rst(rst),
    .write_address(M_players_write_address),
    .we(M_players_we),
    .data(M_players_data),
    .read_address_a(M_players_read_address_a),
    .read_address_b(M_players_read_address_b),
    .out_a(M_players_out_a),
    .out_b(M_players_out_b),
    .all_scores(M_players_all_scores),
    .all_buttons(M_players_all_buttons),
    .counter_out(M_players_counter_out)
  );
  wire [1-1:0] M_randoc_out;
  randomnumber_9 randoc (
    .clk(clk),
    .rst(rst),
    .out(M_randoc_out)
  );
  
  always @* begin
    M_edge_detector_diceroll_in = M_randoc_out;
    M_game_controlunit_p1_rolldicebutton = p1_rolldicebutton;
    M_game_controlunit_p1_holdbutton = p1_holdbutton;
    M_game_controlunit_p2_rolldicebutton = p2_rolldicebutton;
    M_game_controlunit_p2_holdbutton = p2_holdbutton;
    M_game_controlunit_diceroll = M_edge_detector_diceroll_out;
    decimal_counter_increase = M_game_controlunit_decimal_counter_increase;
    decimal_counter_rst = M_game_controlunit_decimal_counter_rst;
    M_players_we = M_game_controlunit_we_regfile;
    M_players_write_address = M_game_controlunit_regfile_write_address;
    M_players_read_address_a = M_game_controlunit_regfile_read_address_a;
    M_players_read_address_b = M_game_controlunit_regfile_read_address_b;
    M_game_controlunit_regfile_datain = M_players_out_b;
    
    case (M_game_controlunit_asel)
      2'h0: begin
        inputAlu_a = M_players_out_a;
      end
      2'h1: begin
        inputAlu_a = 1'h0;
      end
      2'h2: begin
        inputAlu_a = 1'h1;
      end
      2'h3: begin
        inputAlu_a = 5'h1f;
      end
      default: begin
        inputAlu_a = 1'h0;
      end
    endcase
    
    case (M_game_controlunit_bsel)
      3'h0: begin
        inputAlu_b = M_players_out_b;
      end
      3'h1: begin
        inputAlu_b = 1'h0;
      end
      3'h2: begin
        inputAlu_b = 1'h1;
      end
      3'h3: begin
        inputAlu_b = 2'h2;
      end
      3'h4: begin
        inputAlu_b = 2'h3;
      end
      3'h5: begin
        inputAlu_b = 3'h4;
      end
      3'h6: begin
        inputAlu_b = 3'h5;
      end
      3'h7: begin
        inputAlu_b = 3'h6;
      end
      default: begin
        inputAlu_b = 1'h0;
      end
    endcase
    M_alu_a = inputAlu_a;
    M_alu_b = inputAlu_b;
    M_alu_alufn = M_game_controlunit_alufn;
    
    case (M_game_controlunit_alu_out_sel)
      2'h1: begin
        M_players_data = 16'hffff;
      end
      2'h2: begin
        M_players_data = 16'h000f;
      end
      2'h3: begin
        M_players_data = 1'h0;
      end
      default: begin
        M_players_data = M_alu_out;
      end
    endcase
    p_A_acc_out = M_players_all_scores[0+7-:8];
    p_A_cur_out = M_players_all_scores[8+7-:8];
    p_B_acc_out = M_players_all_scores[16+7-:8];
    p_B_cur_out = M_players_all_scores[24+7-:8];
    dice12 = M_randoc_out;
  end
endmodule
