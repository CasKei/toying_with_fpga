/*
   This file was generated automatically by Alchitry Labs version 1.2.7.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module regfile_8 (
    input clk,
    input rst,
    input [3:0] write_address,
    input we,
    input [15:0] data,
    input [3:0] read_address_a,
    input [3:0] read_address_b,
    output reg [15:0] out_a,
    output reg [15:0] out_b,
    output reg [31:0] all_scores,
    output reg [3:0] all_buttons,
    output reg [15:0] counter_out
  );
  
  
  
  reg [15:0] M_p_A__accScore_d, M_p_A__accScore_q = 1'h0;
  reg [15:0] M_p_B__accScore_d, M_p_B__accScore_q = 1'h0;
  reg [15:0] M_p_A__curScore_d, M_p_A__curScore_q = 1'h0;
  reg [15:0] M_p_B__curScore_d, M_p_B__curScore_q = 1'h0;
  reg [15:0] M_player_turn_d, M_player_turn_q = 1'h0;
  reg [15:0] M_diceScore_d, M_diceScore_q = 1'h0;
  reg [15:0] M_tempVar_d, M_tempVar_q = 1'h0;
  
  always @* begin
    M_p_A__accScore_d = M_p_A__accScore_q;
    M_p_B__accScore_d = M_p_B__accScore_q;
    M_diceScore_d = M_diceScore_q;
    M_tempVar_d = M_tempVar_q;
    M_p_B__curScore_d = M_p_B__curScore_q;
    M_p_A__curScore_d = M_p_A__curScore_q;
    M_player_turn_d = M_player_turn_q;
    
    if (we) begin
      
      case (write_address)
        4'h0: begin
          M_p_A__accScore_d = data;
        end
        4'h1: begin
          M_p_B__accScore_d = data;
        end
        4'h2: begin
          M_p_A__curScore_d = data;
        end
        4'h3: begin
          M_p_B__curScore_d = data;
        end
        4'h7: begin
          M_player_turn_d = data;
        end
        4'h8: begin
          M_diceScore_d = data;
        end
        4'hf: begin
          M_tempVar_d = data;
        end
      endcase
    end
    
    case (read_address_a)
      4'h0: begin
        out_a = M_p_A__accScore_q;
      end
      4'h1: begin
        out_a = M_p_B__accScore_q;
      end
      4'h2: begin
        out_a = M_p_A__curScore_q;
      end
      4'h3: begin
        out_a = M_p_B__curScore_q;
      end
      4'h7: begin
        out_a = M_player_turn_q;
      end
      4'h8: begin
        out_a = M_diceScore_q;
      end
      4'hf: begin
        out_a = M_tempVar_q;
      end
      default: begin
        out_a = 1'h0;
      end
    endcase
    
    case (read_address_b)
      4'h0: begin
        out_b = M_p_A__accScore_q;
      end
      4'h1: begin
        out_b = M_p_B__accScore_q;
      end
      4'h2: begin
        out_b = M_p_A__curScore_q;
      end
      4'h3: begin
        out_b = M_p_B__curScore_q;
      end
      4'h7: begin
        out_b = M_player_turn_q;
      end
      4'h8: begin
        out_b = M_diceScore_q;
      end
      4'hf: begin
        out_b = M_tempVar_q;
      end
      default: begin
        out_b = 1'h0;
      end
    endcase
    all_scores[0+15-:16] = M_p_A__accScore_q;
    all_scores[16+15-:16] = M_p_B__accScore_q;
    all_buttons[0+0-:1] = M_p_A__curScore_q[0+0-:1];
    all_buttons[1+0-:1] = M_p_B__curScore_q[1+0-:1];
    all_buttons[2+1-:2] = M_diceScore_q[2+1-:2];
    counter_out = M_player_turn_q;
  end
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_p_A__accScore_q <= 1'h0;
      M_p_B__accScore_q <= 1'h0;
      M_p_A__curScore_q <= 1'h0;
      M_p_B__curScore_q <= 1'h0;
      M_player_turn_q <= 1'h0;
      M_diceScore_q <= 1'h0;
      M_tempVar_q <= 1'h0;
    end else begin
      M_p_A__accScore_q <= M_p_A__accScore_d;
      M_p_B__accScore_q <= M_p_B__accScore_d;
      M_p_A__curScore_q <= M_p_A__curScore_d;
      M_p_B__curScore_q <= M_p_B__curScore_d;
      M_player_turn_q <= M_player_turn_d;
      M_diceScore_q <= M_diceScore_d;
      M_tempVar_q <= M_tempVar_d;
    end
  end
  
endmodule
