module au_top (
    input clk,              // 100MHz clock
    input rst_n,            // reset button (active low)
    output led [8],         // 8 user controllable LEDs
    input usb_rx,           // USB->Serial input
    output usb_tx,          // USB->Serial output
    output io_led [3][8],   // LEDs on IO Shield
    output io_seg [8],      // 7-segment LEDs on IO Shield
    output io_sel [4],      // Digit select on IO Shield
    input io_button [5],    // 5 buttons on IO Shield
    input io_dip [3][8]     // DIP switches on IO Shield
  ) {
  
  sig rst;                  // reset signal
  
  .clk(clk) {
    // The reset conditioner is used to synchronize the reset signal to the FPGA
    // clock. This ensures the entire FPGA comes out of reset at the same time.
    .rst(rst) {
       multisevensegment seg;
       beta b;
       
    }
    
    reset_conditioner reset_cond;
    
    edge_detector edgep1_roll (#RISE(1), #FALL(0));
    edge_detector edgep1_hold (#RISE(1), #FALL(0));
    edge_detector edgep2_roll (#RISE(1), #FALL(0));
    edge_detector edgep2_hold (#RISE(1), #FALL(0));

    button_conditioner p1_roll; 
    button_conditioner p1_hold;
    button_conditioner p2_roll;
    button_conditioner p2_hold;  
  }
  
  always {
    reset_cond.in = ~rst_n; // input raw inverted reset signal
    rst = reset_cond.out;   // conditioned reset
    
    usb_tx = usb_rx;        // loop serial port
    
    led = 8h00;             // turn LEDs off
    
    io_led = 3x{{8h00}};    // turn LEDs off
    io_seg = 8hff;          // turn segments off
    io_sel = 4hf;           // select no digits
    
    
    
    p1_roll.in = io_button[3];
    p1_hold.in = io_button[2];
    p2_roll.in = io_button[4];
    p2_hold.in = io_button[0];
    
    edgep1_roll.in = p1_roll.out;
    edgep1_hold.in = p1_hold.out;
    edgep2_roll.in = p2_roll.out;
    edgep2_hold.in = p2_hold.out;
    
    b.p1_rolldicebutton = edgep1_roll.out;
    b.p1_holdbutton = edgep1_hold.out;
    b.p2_rolldicebutton = edgep2_roll.out;
    b.p2_holdbutton = edgep2_hold.out;
    
    
    
    
    seg.values = game_CU
    
    
    
    
    
    
    
    
  }
}