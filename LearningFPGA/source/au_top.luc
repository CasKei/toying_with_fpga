module au_top (
    input clk,              // 100MHz clock
    input rst_n,            // reset button (active low)
    output led [8],         // 8 user controllable LEDs
    input usb_rx,           // USB->Serial input
    output usb_tx,          // USB->Serial output
    output io_led [3][8],   // LEDs on IO Shield
    output io_seg [8],      // 7-segment LEDs on IO Shield
    output io_sel [4],      // Digit select on IO Shield
    input io_button [5],    // 5 buttons on IO Shield
    input io_dip [3][8]     // DIP switches on IO Shield
  ) {
  
  sig rst;                  // reset signal
  // full_adder fulladder;
  // eight_bit_adder eightbitadder;
  // full_adder_ROM fulladderROM;
  // eight_bit_shiftleft eightbitSL;
  seven_seg sevenseg;
  
  //counter slowclock(#SIZE(1),#DIV(26), .clk(clk), .rst(rst));
  //seq_plus_two seqplustwo(.clk(slowclock.value), .rst(rst));
  //seq_plus_vary seqplusvary(.clk(slowclock.value), .rst(rst));
  
  .clk(clk) {
    // The reset conditioner is used to synchronize the reset signal to the FPGA
    // clock. This ensures the entire FPGA comes out of reset at the same time.
    reset_conditioner reset_cond;
  }
  
  always {
    reset_cond.in = ~rst_n; // input raw inverted reset signal
    rst = reset_cond.out;   // conditioned reset
    
    usb_tx = usb_rx;        // loop serial port
    
    led = 8h00;             // turn LEDs off
    
    io_led = 3x{{8h00}};    // turn LEDs off
    io_seg = 8hff;          // turn segments off
    io_sel = 4hf;           // select no digits
    
    // full adder
    //fulladder.x = io_dip[0][0];
    //fulladder.y = io_dip[0][1];
    //fulladder.cin = io_dip[0][2];
    //io_led[2][1] = fulladder.s;
    //io_led[2][0] = fulladder.cout;
    
    // eight bit adder
    //eightbitadder.x = io_dip[0];
    //eightbitadder.y = io_dip[1];
    //eightbitadder.cin = io_dip[2][0];
    //io_led[1] = eightbitadder.s;
    //io_led[2][0] = eightbitadder.cout;
    
    // full adder made with ROM
    // fulladderROM.address[0] = io_dip[0][0];
    // fulladderROM.address[1] = io_dip[0][1];
    // fulladderROM.address[2] = io_dip[0][2];
    // io_led[2][0] = fulladderROM.value[0];
    // io_led[2][1] = fulladderROM.value[1];

    // eightbitSL.a = io_dip[0];
    // eightbitSL.b = io_dip[1][2:0];
    // io_led[0] = eightbitSL.s;
    
    //io_led[2] = seqplusvary.out;
    sevenseg.char = io_dip[0][3:0];

  }
}