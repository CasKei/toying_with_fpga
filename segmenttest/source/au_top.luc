module au_top (
    input clk,              // 100MHz clock
    input rst_n,            // reset button (active low)
    output led [8],         // 8 user controllable LEDs
    input usb_rx,           // USB->Serial input
    output usb_tx,          // USB->Serial output
    output io_led [3][8],   // LEDs on IO Shield
    output io_seg [8],      // 7-segment LEDs on IO Shield
    output io_sel [4],      // Digit select on IO Shield
    input io_button [5],    // 5 buttons on IO Shield
    input io_dip [3][8]     // DIP switches on IO Shield
  ) {
  
  sig rst;                  // reset signal
  
  
  .clk(clk) {
    // The reset conditioner is used to synchronize the reset signal to the FPGA
    // clock. This ensures the entire FPGA comes out of reset at the same time.
    reset_conditioner reset_cond;
       
    edge_detector edge_detector (#RISE(1), #FALL(0));
       
    .rst(rst) {
      multi_seven_seg seg;
      multi_dec_ctr dec_ctr;
      counter ctr (#SIZE(1), #DIV(24));
    }
  } 
  
  sig result [24];
  
  always {
    reset_cond.in = ~rst_n; // input raw inverted reset signal
    rst = reset_cond.out;   // conditioned reset
       
    usb_tx = usb_rx;        // loop serial port
       
    led = 8h00;             // turn LEDs off
       
    edge_detector.in = ctr.value;
    dec_ctr.inc = edge_detector.out;
    seg.values = dec_ctr.digits;
       
    io_seg = ~seg.seg; // connect segments to the driver
    io_sel = ~seg.sel; // connect digit select to the driver
       
    result = io_dip[1] * io_dip[0]; // multiply the switch values
       
    io_led = $build(result, 3); // convert result from a 24-bit array to a 3x8 array
  }
}