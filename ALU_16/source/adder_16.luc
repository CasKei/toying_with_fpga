module adder_16 (
// Inputs: 16bit a, b, 6bit alufn signal
// Outputs: 1 bit zvn
    input a[16],
    input b[16],
    input alufn[6],
    output out[16],
    output z[1],
    output v[1],
    output n[1]
  ) {
  
  // out is write only, make temp var for output
  sig s[16];
  sig alufn0[1];

  always {
    s = 16b0;
    alufn0 = alufn[0]; //make this so that computing zvn does not rely directly on alufn
    // boolean additional functions has alufn[0] so we avoid using this directly
    case(alufn[3:0]) {
      b0000 : s = a + b; // add
      b0001 : s = a - b; // subtract
      b1000 : s = a * b; // multiply
      b0100 : s = a / b; // divide
      default : s = 16b0; // 0
    }
    
    z = ~|s; // any non-0 will make |s 1, so not|s will be true iff all 0
    // followed lab3 but xor b with alufn to have 2's complement b
    v = (a[15] & (b[15] ^ alufn0) & ~s[15]) | (~a[15] & ~(b[15] ^ alufn0) & s[15]);
    n = s[15]; //msb if negative
    
    //write to out
    out = s;
    

  }
}
